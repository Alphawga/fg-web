generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  active             Boolean            @default(true)
  email              String?            @unique
  username           String?            @unique
  name               String
  phone_number       String?
  password           String
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?
  claims             Claim[]
  locations          Location[]         @relation("UserLocations")

  @@unique([email, username], name: "unique_login_credentials")
  @@index([deleted_at, active])
  @@map(name: "users")
}

model Claim {
  id            String      @id @default(uuid())
  active        Boolean     @default(true)
  type          String      // Possible values: "ROLE", "PERMISSION"
  user_id       String
  permission_id String?
  role_name     String?
  permission    Permission? @relation(fields: [permission_id], references: [id])
  role          Role?       @relation(fields: [role_name], references: [name])
  user          User        @relation(fields: [user_id], references: [id])

  @@unique([user_id, role_name], name: "unique_claim_role")
  @@unique([user_id, permission_id], name: "unique_claim_permission")
  @@map(name: "claims")
}

model Permission {
  id          String           @id @default(uuid())
  name        String
  active      Boolean
  module      String
  action      String
  resource_id String?
  roles       PermissionRole[]
  users       Claim[]

  @@map(name: "permissions")
}

model Role {
  name        String           @id
  active      Boolean          @default(true)
  built_in    Boolean          @default(false)
  permissions PermissionRole[]
  users       Claim[]

  @@map(name: "roles")
}

model PermissionRole {
  id            String     @id @default(uuid())
  active        Boolean
  role_name     String
  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id])
  role          Role       @relation(fields: [role_name], references: [name])

  @@unique([id, role_name], name: "unique_permission_role")
  @@map(name: "permission_role")
}

model Location {
  id            String       @id @default(uuid())
  name          String
  address       String
  city          String
  state         String
  country       String
  postal_code   String?
  default       Boolean      @default(false) 
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  deleted_at  DateTime? 
  pastors       Pastor[]
  events        Event[]
  news          News[]
  offerings     Offering[]
  administrators User[]       @relation("UserLocations")

  @@map(name: "locations")
}

model Pastor {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  phone       String?
  location_id String
  location    Location   @relation(fields: [location_id], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map(name: "pastors")
}

model Event {
  id          String     @id @default(uuid())
  title       String
  description String?
  start_date  DateTime
  end_date    DateTime
  location_id String
  location    Location   @relation(fields: [location_id], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  deleted_at  DateTime? 

  @@map(name: "events")
}

model News {
  id          String     @id @default(uuid())
  title       String
  content     String
  published   Boolean    @default(false)
  location_id String
  location    Location   @relation(fields: [location_id], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
   deleted_at         DateTime?

  @@map(name: "news")
}

model Offering {
  id          String     @id @default(uuid())
  amount      Float
  date        DateTime
  location_id String
  location    Location   @relation(fields: [location_id], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())

  @@map(name: "offerings")
}

model LandingPageContent {
  id          String     @id @default(uuid())
  section     String
  content     String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())

  @@map(name: "landing_page_contents")
}
